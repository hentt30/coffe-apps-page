{"ast":null,"code":"var _jsxFileName = \"/home/henrique/Documents/coffe-apps-page/landing-page/src/LandingPage/Projetos/Projetos.js\";\nimport React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport styled from \"styled-components\";\nimport MediaCard from \"./Card/Card\";\nimport { withStyles } from \"@material-ui/styles\";\nimport PropTypes from \"prop-types\";\n\nconst styles = theme => ({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"space-evenly\",\n    minHeight: \"130vh\",\n    maxWidth: \"80vw\",\n    paddingBottom: \"16px\"\n  },\n  title: {\n    fontSize: \"56px\",\n    fontFamily: \"lato\",\n    fontWeight: \"bold\",\n    paddingTop: \"16px\",\n    paddingBottom: \"16px\"\n  },\n  text: {\n    fontSize: \"20px\",\n    fontFamily: \"lato\",\n    display: \"flex\",\n    justifyContent: \"center\"\n  },\n  img: {\n    width: \"100%\"\n  },\n  card: {\n    width: \"400px\",\n    padding: \"10px 0px 10px\"\n  },\n  description: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\"\n  }\n});\n\nclass Projetos extends React.Component {\n  render() {\n    const {\n      classes\n    } = this.props;\n    const DataCard = [{\n      imgs: [{\n        label: \"Tela de Login\",\n        imgPath: \"/workplace.svg\"\n      }, {\n        label: \"Tela de Chat\",\n        imgPath: \"/workplace.svg\"\n      }],\n      title: \"Aplicativo\",\n      subtitle: \"Chatbot para Android, IPhone e Web.\",\n      description: \"Chatbot com sistema de login, cadastro e comunicação com uma API feita em Python que executava toda a lógica para gerar uma resposta ao usuário. Este aplicativo foi desenvolvido para Android, IPhone e Web.\"\n    }, {\n      imgs: [{\n        label: \"Tela de Login\",\n        imgPath: \"/workplace.svg\"\n      }, {\n        label: \"Tela de Chat\",\n        imgPath: \"/workplace.svg\"\n      }],\n      title: \"Aplicativo\",\n      subtitle: \"Aplicação Web de vídeos no modelo do Netflix.\",\n      description: \"Aplicação Web com sistema de login, cadastro, exibição de vídeos e upload de vídeos. Nesta aplicação o dono da página realizava upload dos vídeos para os assinantes da plataforma.\"\n    }, {\n      imgs: [{\n        label: \"Tela de Login\",\n        imgPath: \"/workplace.svg\"\n      }, {\n        label: \"Tela de Chat\",\n        imgPath: \"/workplace.svg\"\n      }],\n      title: \"Ciência de Dados\",\n      subtitle: \"Utilização de Machine Learning para .\",\n      description: \"Aplicação Web de vídeos no modelo do Netflix.\"\n    }, {\n      imgs: [{\n        label: \"Tela de Login\",\n        imgPath: \"/workplace.svg\"\n      }, {\n        label: \"Tela de Chat\",\n        imgPath: \"/workplace.svg\"\n      }],\n      title: \"Inteligência Artificial\",\n      subtitle: \"Aplicação Web de vídeos no modelo do Netflix.\",\n      description: \"Aplicação Web de vídeos no modelo do Netflix.\"\n    }, {\n      imgs: [{\n        label: \"Tela de Login\",\n        imgPath: \"/workplace.svg\"\n      }, {\n        label: \"Tela de Chat\",\n        imgPath: \"/workplace.svg\"\n      }],\n      title: \"Inteligência Artificial\",\n      subtitle: \"Série de projetos desenvolvidos \",\n      description: `Projetos relacionados a otimizações, visão computational e aprendizado por\\\n        reforço.<b>ddd</b>`\n    }, {\n      imgs: [{\n        label: \"\",\n        imgPath: \"/robot.svg\"\n      }],\n      title: \"Automatização de Processos\",\n      subtitle: \"Web scrapping, sistemas operacionais e APIs\",\n      description: \"Criação de scripts para burlar captchas ,extrair informações de páginas web, \\\n          instalação de dependências de um projeto,testes de montecarlo utilizando APIS e  criação de planilhas. \"\n    }];\n    return React.createElement(\"div\", {\n      style: {\n        background: \"#3df0b1\",\n        width: \"100%\",\n        display: \"flex\",\n        justifyContent: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: classes.root,\n      id: \"projetos\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      justify: \"center\",\n      alignItems: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      className: classes.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, \"Projetos\")), React.createElement(Grid, {\n      container: true,\n      display: \"flex\",\n      alignItems: \"center\",\n      justify: \"space-evenly\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, DataCard.map(data => React.createElement(Grid, {\n      className: classes.card,\n      item: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(MediaCard, Object.assign({}, data, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    })))))));\n  }\n\n}\n\nProjetos.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(Projetos);","map":{"version":3,"sources":["/home/henrique/Documents/coffe-apps-page/landing-page/src/LandingPage/Projetos/Projetos.js"],"names":["React","Grid","Typography","styled","MediaCard","withStyles","PropTypes","styles","theme","root","display","flexDirection","alignItems","justifyContent","minHeight","maxWidth","paddingBottom","title","fontSize","fontFamily","fontWeight","paddingTop","text","img","width","card","padding","description","Projetos","Component","render","classes","props","DataCard","imgs","label","imgPath","subtitle","background","map","data","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport styled from \"styled-components\";\nimport MediaCard from \"./Card/Card\";\nimport { withStyles } from \"@material-ui/styles\";\nimport PropTypes from \"prop-types\";\n\nconst styles = theme => ({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"space-evenly\",\n    minHeight: \"130vh\",\n    maxWidth: \"80vw\",\n    paddingBottom: \"16px\"\n  },\n  title: {\n    fontSize: \"56px\",\n    fontFamily: \"lato\",\n    fontWeight: \"bold\",\n    paddingTop: \"16px\",\n    paddingBottom: \"16px\"\n  },\n  text: {\n    fontSize: \"20px\",\n    fontFamily: \"lato\",\n    display: \"flex\",\n    justifyContent: \"center\"\n  },\n  img: {\n    width: \"100%\"\n  },\n  card: {\n    width: \"400px\",\n    padding: \"10px 0px 10px\"\n  },\n  description: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\"\n  }\n});\n\nclass Projetos extends React.Component {\n  render() {\n    const { classes } = this.props;\n\n    const DataCard = [\n      {\n        imgs: [\n          {\n            label: \"Tela de Login\",\n            imgPath: \"/workplace.svg\"\n          },\n          {\n            label: \"Tela de Chat\",\n            imgPath: \"/workplace.svg\"\n          }\n        ],\n        title: \"Aplicativo\",\n        subtitle: \"Chatbot para Android, IPhone e Web.\",\n        description:\n          \"Chatbot com sistema de login, cadastro e comunicação com uma API feita em Python que executava toda a lógica para gerar uma resposta ao usuário. Este aplicativo foi desenvolvido para Android, IPhone e Web.\"\n      },\n      {\n        imgs: [\n          {\n            label: \"Tela de Login\",\n            imgPath: \"/workplace.svg\"\n          },\n          {\n            label: \"Tela de Chat\",\n            imgPath: \"/workplace.svg\"\n          }\n        ],\n        title: \"Aplicativo\",\n        subtitle: \"Aplicação Web de vídeos no modelo do Netflix.\",\n        description:\n          \"Aplicação Web com sistema de login, cadastro, exibição de vídeos e upload de vídeos. Nesta aplicação o dono da página realizava upload dos vídeos para os assinantes da plataforma.\"\n      },\n      {\n        imgs: [\n          {\n            label: \"Tela de Login\",\n            imgPath: \"/workplace.svg\"\n          },\n          {\n            label: \"Tela de Chat\",\n            imgPath: \"/workplace.svg\"\n          }\n        ],\n        title: \"Ciência de Dados\",\n        subtitle: \"Utilização de Machine Learning para .\",\n        description: \"Aplicação Web de vídeos no modelo do Netflix.\"\n      },\n      {\n        imgs: [\n          {\n            label: \"Tela de Login\",\n            imgPath: \"/workplace.svg\"\n          },\n          {\n            label: \"Tela de Chat\",\n            imgPath: \"/workplace.svg\"\n          }\n        ],\n        title: \"Inteligência Artificial\",\n        subtitle: \"Aplicação Web de vídeos no modelo do Netflix.\",\n        description: \"Aplicação Web de vídeos no modelo do Netflix.\"\n      },\n      {\n        imgs: [\n          {\n            label: \"Tela de Login\",\n            imgPath: \"/workplace.svg\"\n          },\n          {\n            label: \"Tela de Chat\",\n            imgPath: \"/workplace.svg\"\n          }\n        ],\n        title: \"Inteligência Artificial\",\n        subtitle: \"Série de projetos desenvolvidos \",\n        description: `Projetos relacionados a otimizações, visão computational e aprendizado por\\\n        reforço.<b>ddd</b>`\n      },\n      {\n        imgs: [\n          {\n            label: \"\",\n            imgPath: \"/robot.svg\"\n          }\n        ],\n        title: \"Automatização de Processos\",\n        subtitle: \"Web scrapping, sistemas operacionais e APIs\",\n        description:\n          \"Criação de scripts para burlar captchas ,extrair informações de páginas web, \\\n          instalação de dependências de um projeto,testes de montecarlo utilizando APIS e  criação de planilhas. \"\n      }\n    ];\n\n    return (\n      <div\n        style={{\n          background: \"#3df0b1\",\n          width: \"100%\",\n          display: \"flex\",\n          justifyContent: \"center\"\n        }}\n      >\n        <div className={classes.root} id=\"projetos\">\n          <Grid container justify=\"center\" alignItems=\"center\">\n            <Typography className={classes.title}>Projetos</Typography>\n          </Grid>\n          <Grid\n            container\n            display=\"flex\"\n            alignItems=\"center\"\n            justify=\"space-evenly\"\n          >\n            {DataCard.map(data => (\n              <Grid className={classes.card} item>\n                <MediaCard {...data} />\n              </Grid>\n            ))}\n          </Grid>\n        </div>\n      </div>\n    );\n  }\n}\n\nProjetos.propTypes = {\n  classes: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(Projetos);\n"]},"metadata":{},"sourceType":"module"}